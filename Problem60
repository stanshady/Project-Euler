import java.util.*;

public class Problem60
{
    public static int[] primes = Algorithm.primesLessThan(10000);

    public static void main(String[] args)
    {
        /*
         * 1228 is the index of prime = 9973 (the greatest 4 digit prime)
         *  Of course the following does not prove the problem in general.
         *  But the concatanation of two 4 digit numbers is the largest int will store.
         *  Of coures we could easily switch to longs but the REAL problem is that
         *  I don't have a fast way of cheching primality for numbers > 1 billion.
         *  Miller-Rabin would be cheating too...I guess.
         */
        
        int i = primes.length - 1;

        int[][] pairs = findPairs(i);
        System.out.println(findMin(pairs));

        int[][] trips = findTrips(pairs, i);
        System.out.println(findMin(trips));

        int[][] quads = findQuads(trips,i);
        System.out.println(findMin(quads));

        int[][] pents = findPents(quads,i);
        System.out.println(findMin(pents));   

    }

    public static int[][] findPents(int[][] quads, int upperBound)
    {
        ArrayList<int[]> pents = new ArrayList<int[]>();

        int row = 0;
        while(row < quads.length - 1)
        {
            int currentRow = row + 1;
            while(currentRow < quads.length &&
            quads[currentRow][2] == quads[row][2])
            {
                int try1 = concat(quads[row][3], quads[currentRow][3]);
                int try2 = concat(quads[currentRow][3], quads[row][3]);

                if(Algorithm.isPrime(try1) &&
                Algorithm.isPrime(try2) )
                    pents.add(new int[] {quads[row][0], quads[row][1], quads[row][2], quads[row][3], quads[currentRow][3]});
                currentRow++;
            }
            row++;
        }

        int[][] ret = new int[pents.size()][5];
        for(int i = 0; i < pents.size(); i++)
        {
            ret[i] = pents.get(i);
        }

        return ret;
    }

    public static int[][] findQuads(int[][] trips, int upperBound)
    {
        ArrayList<int[]> quads = new ArrayList<int[]>();

        int row = 0;
        while(row < trips.length - 1)
        {
            int currentRow = row + 1;
            while(currentRow < trips.length
            && trips[currentRow][1] == trips[row][1])
            {
                int try1 = concat(trips[row][2], trips[currentRow][2]);
                int try2 = concat(trips[currentRow][2], trips[row][2]);

                if(Algorithm.isPrime(try1) &&
                Algorithm.isPrime(try2) )
                    quads.add(new int[] {trips[row][0], trips[row][1], trips[row][2], trips[currentRow][2]});
                currentRow++;
            }
            row++;
        }

        int[][] ret = new int[quads.size()][4];
        for(int i = 0; i < quads.size(); i++)
        {
            ret[i] = quads.get(i);
        }

        return ret;

    }

    public static int[][] findTrips(int[][] pairs, int upperBound)
    {
        ArrayList<int[]> trips = new ArrayList<int[]>();
        int row = 0;
        while(row < pairs.length - 1)
        {
            int currentRow = row + 1;
            while(currentRow < pairs.length
            && pairs[currentRow][0] == pairs[row][0])
            {
                int try1 = concat(pairs[row][1], pairs[currentRow][1]);
                int try2 = concat(pairs[currentRow][1], pairs[row][1]);

                if(Algorithm.isPrime(try1) &&
                Algorithm.isPrime(try2) )
                    trips.add(new int[] {pairs[row][0], pairs[row][1], pairs[currentRow][1]});
                currentRow++;
            }
            row++;
        }

        int[][] ret = new int[trips.size()][3];
        for(int i = 0; i < trips.size(); i++)
        {
            ret[i] = trips.get(i);
        }

        return ret;
    }

    public static int[][] findPairs(int upperBound)
    {
        ArrayList<int[]> pairs = new ArrayList<int[]>();

        for(int i = 1; i < upperBound - 1; i++)
        {
            for(int j = i + 1; j < upperBound; j++)
            {
                int try1 = concat(primes[i], primes[j]);
                int try2 = concat(primes[j], primes[i]);

                if(Algorithm.isPrime(try1) &&
                Algorithm.isPrime(try2) )
                    pairs.add(new int[] {primes[i], primes[j]});
            }
        }

        int[][] ret = new int[pairs.size()][2];
        for(int i = 0; i < pairs.size(); i++)
        {
            ret[i] = pairs.get(i);
        }

        return ret;
    }

    public static int findMin(int[][] nums)
    {
        int min = Integer.MAX_VALUE;
        int minRow = 0;
        for(int r = 0; r < nums.length; r++)
        {
            int temp = 0;
            for(int c = 0; c < nums[r].length; c++)
            {
                temp += nums[r][c];
            }
            if(temp < min)
            {
                min = temp;
                minRow = r;
            }
        }
        System.out.println(Arrays.toString(nums[minRow]));
        return min;
    }

    public static int concat(int left, int right)
    {
        String ret = String.valueOf(left) + String.valueOf(right);
        return Integer.valueOf(ret);
    }
}

